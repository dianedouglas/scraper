<?php
/**
* Implementation of hook_menu().
*
*/
function myscraper_menu() {
  // When you visit this URL, all pages on AQ will be queried and stored. 
  // After the scrape, disable module for safety to avoid duplicates.
  $items['scrape'] = array(
    'title' => t('Aquarius Records Reviews'),
    'page callback' => 'scrape',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function scrape() {

  // get array of urls to query. 
  $url_queries = array();
  // go through each letter in the alphabet and figure out how many pages on each letter.
  $alphabet = range('a', 'z');
  $alphabet[] = 'other';
  // base path for every page.
  $base_path = 'https://web.archive.org/web/20160410015723/http://aquariusrecords.org/cat/';
  
  foreach ($alphabet as $letter) {
    $current_url = $base_path . $letter . '.html';
    $total = getPagesForLetter($current_url);
    $url_queries[$letter] = $total; 
  }

  $final_list_urls = [];
  foreach ($url_queries as $letter => $total_pages) {
    $final_list_urls[$letter] = $base_path . $letter . '.html';
    for ($i=2; $i <=$total_pages ; $i++) { 
      $final_list_urls[$letter . $i] = $base_path . $letter . $i . '.html';
    }
  }

  // pre_print($final_list_urls);

  // redefine to single url for testing:
  // $final_list_urls = [];
  // $final_list_urls['a2'] = 'https://web.archive.org/web/20160410015723/http://aquariusrecords.org/cat/a2.html';
  // $final_list_urls['f3'] = 'https://web.archive.org/web/20160410015723/http://aquariusrecords.org/cat/f3.html';

  $final_csv = [];

  foreach ($final_list_urls as $url_index => $query) {
    $formatted_reviews = scraper($query);
    $csv_arrays = add_reviews_to_csv_string($formatted_reviews, $url_index);
    $final_csv = array_merge($final_csv, $csv_arrays);
  }

  // pre_print($final_csv);

  // send response headers to the browser
  drupal_add_http_header('Content-Type', 'text/csv');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=csvfile.csv');

  $fp = fopen('php://output', 'w');

  $headers = array('key','artist','title','labelinfo','img','audio','audio-title','body');
  fputcsv($fp, $headers, "|", '"');
  
  foreach($final_csv as $line){
    fputcsv($fp, $line, "|", '"');
  }

  fclose($fp);
  drupal_exit();
  return 'done';
}

function getPagesForLetter($url) {
  $html = new DOMDocument();
  @$html->loadHTMLFile($url);

  foreach($html->getElementsByTagName('div') as $div){
    if($div->getAttribute('align') === 'center'){
      foreach ($div->getElementsByTagName('a') as $a) {
        if (strpos($a->textContent, 'Â»') !== FALSE) {
          // if you reach the end of the page numbers
          break;
        } else {
          $last_page = $a->textContent;
        }
      }
    }
  };
  return $last_page;
}

function scraper($url) {
  // Get all records on one page.
  $html = new DOMDocument();
  @$html->loadHTMLFile($url);

  $reviews = array(); //hold raw review data.
  $count = 0; // need this because reviews are stored as paragraph tags. But not the first 4 lol :)
  $review_index = 0; // we'll use this to number the reviews as we store them in the $reviews array.

  foreach($html->getElementsByTagName('p') as $ptag) { 
    $count++;
    if ($count > 4) {
      // at this point this is ONE ALBUM REVIEW.
      foreach ($ptag->childNodes as $node) {
      // for each thing inside a review...
        if ($node->nodeValue) { 
          // store all paragraphs as a review. Includes variable amounts of data. 
          // always includes artist, title, label info.
          // could include: review body paragraphs, song titles, and extra data such as messages like 'out of print' that we don't want to save in the database. Store it all for now. 
          // $formatted_reviews will parse this.
          $reviews['review' . $review_index][] = $node->nodeValue;
        }
      }

      // Now get all image tags to find album art for current album.
      foreach ($ptag->getElementsByTagName('img') as $imgnode) {
        // make sure the img tag you're storing is the album cover. 
        // raw HTML uses a blank 'dot.gif' image as spacer that we don't want to store. 
        // also, not all albums have album art stored. When you find one store it in the review under 'img'
        if ($imgnode->getAttribute('alt') == 'album cover') {
          $reviews['review' . $review_index]['img'] = 'https://web.archive.org' . $imgnode->getAttribute('src');
        }
      }
      foreach ($ptag->getElementsByTagName('a') as $link) {
        $reviews['review' . $review_index]['audio'][$link->nodeValue] = 'https://web.archive.org' . $link->getAttribute('href');
      }
      $review_index++;
    }
  } 

  // pre_print($reviews);
  // Each entry in $reviews holds an array of paragraph data with variable length including the album art:
  /*
[review0] => Array
    (
        [0] => 


        [1] => ACID MOTHERS TEMPLE & THE MELTING PARAISO U.F.O.
        [2] => In O To Infinity
        [3] => (Important) cd 14.98
        [4] => THIS IS CURRENTLY OUT OF PRINT OR OTHERWISE UNAVAILABLE TO US AT THE MOMENT, SO PLEASE DO NOT ORDER IT. SORRY.
        [5] => It's really hard to keep up with these guys. We love pretty much everything they do...
        [6] => In O To Infinity marks two milestones of sorts for the bands, and for fans, one is the return of Cotton Casino to the fold...
        [7] => And as much as we love all the different facets of AMT...
        [8] => "In A" is all chants and grunts and weird vocalizations...
        [9] => And finally, "In Infinity", which contrary to what we were ...
        [10] => Another AMT winner, to add to that dedicated shelf in your house ...


        [11] => MPEG Stream: "In O"
        [12] => 




        [13] => MPEG Stream: "In A"
        [14] => 




        [img] => https://web.archive.org/web/20150322130420im_/http://aquariusrecords.org/images/amtinotocd.jpg
        [audio] => Array
            (
                ["In O"] => https://web.archive.org/web/20150322130420/http://aquariusrecords.org/audio/amtinotoinfino.m3u
                ["In A"] => https://web.archive.org/web/20150322130420/http://aquariusrecords.org/audio/amtinotoinfina.m3u
            )

    )

  */

  // pre_print($reviews);
  // return 'test';
  return format_reviews_for_saving($reviews);
}

function format_reviews_for_saving($reviews) {
  $formatted_reviews = array();
  // go through each raw review and format it for saving.
  // instead of a flat array of paragraphs, we want to separately store the artist, title, label info, etc. 
  if (!empty($reviews)) {
    foreach ($reviews as $key => $review) {

      if ($review['1'] === 'top of page') {
        break;
      }
      // check label info field first to know if it's a book or magazine - then review body starts here. 
      $paragraph_to_start_review_body = 4;
      if (!empty($review['3'])) {
        if (strlen($review['3'] > 50)) {
          // review body starts here. magazine/book/dvd has no artist. jump right to title in paragraph 1.
          $formatted_reviews[$key]['title'] = !empty($review['1']) ? $review['1'] : 'No Title';    
          $formatted_reviews[$key]['artist'] = 'No Artist';
          $paragraph_to_start_review_body = 3;

        } else {
          // normal. has artist.
          $formatted_reviews[$key]['artist'] = !empty($review['1']) ? $review['1'] : 'No Artist';
          $formatted_reviews[$key]['title'] = !empty($review['2']) ? $review['2'] : 'No Title';
        }
      } else {
        // if there is nothing in review paragraph 3, then no label info.
        $formatted_reviews[$key]['labelinfo'] = 'No Label Info';
      }

      $formatted_reviews[$key]['img'] = !empty($review['img']) ? $review['img'] : 'No Image';
      $formatted_reviews[$key]['audio'] = !empty($review['audio']) ? $review['audio'] : array('No Audio' => 'noaudio');

      // copy all paragraphs of review
      for($i = $paragraph_to_start_review_body; $i < count($review); $i++){
        if(!empty($review[$i])){
          // we also don't want to store extra paragraphs that are not part of the review.
          if (!strpos($review[$i], "CURRENTLY OUT OF PRINT")) {

            if(!(substr($review[$i], 0, 11) === "MPEG Stream") && !(substr($review[$i], 0, 9) === "RealAudio")) {
              $formatted_reviews[$key]['body'][] = $review[$i];
            }

          }
        }

      }

    }
  }

  // A formatted review now has this format:
  /*
    [review0] => Array
        (
            [artist] => ACID MOTHERS TEMPLE & THE MELTING PARAISO U.F.O.
            [title] => In O To Infinity
            [labelinfo] => (Important) cd 14.98
            [img] => https://web.archive.org/web/20150322130420im_/http://aquariusrecords.org/images/amtinotocd.jpg
            [audio] => Array
                (
                    ["In O"] => https://web.archive.org/web/20150322130420/http://aquariusrecords.org/audio/amtinotoinfino.m3u
                    ["In A"] => https://web.archive.org/web/20150322130420/http://aquariusrecords.org/audio/amtinotoinfina.m3u
                )

            [body] => Array
                (
                    [0] => It's really hard to keep up with these guys...
                    [1] => In O To Infinity marks two milestones of sorts for the bands...
                    [2] => And as much as we love all the different facets of AMT, this might be our favorite, their blissed out cosmic space drift, long form dronescapes, ...
                    [3] => "In A" is all chants and grunts and weird vocalizations, ...
                    [4] => And finally, "In Infinity", which contrary to what we were expecting, is the most 'rock' of the bunch, a wild sprawling avant jazz...
                    [5] => Another AMT winner...
    

                    [6] => 


    

                    [7] => 


    

                    [8] => 
                    [9] => 
                )
        )
  */

  return $formatted_reviews;
}

function add_reviews_to_csv_string($formatted_reviews, $url_index) {
  $output = [];

  foreach ($formatted_reviews as $key => $review) {
    $csv_review = [];
    //key
    array_push($csv_review, $url_index . $key); // a7 . review0
    //artist
    array_push($csv_review, format_strings(!empty($review['artist']) ? $review['artist'] : 'No Artist'));
    //title
    array_push($csv_review, format_strings(!empty($review['title']) ? $review['title'] : 'No Title'));
    //label info
    array_push($csv_review, format_strings(!empty($review['labelinfo']) ? $review['labelinfo'] : 'No Label Info'));
    //album art
    array_push($csv_review, $review['img']); //url no need to format
    //audio links
    if(empty($review['audio'])){
      $review['audio'] = array('No Audio' => 'noaudio');
    };
    $number_of_audio_links = count($review['audio']);
    $index = 0;
    $audio_urls = '';
    $audio_titles = '';
    if(empty($review['body'])){
      $review['body'] = array('No review.');
    };
    foreach ($review['audio'] as $title => $url) {
      $index++;
      if ($index === $number_of_audio_links) {
        // if we're on the last link, add a comma as separator.
        $audio_urls .= $url; 
        $audio_titles .= format_strings($title);
      } else {
        // otherwise, add each url with separator of ;; for multi value field separator
        $audio_urls .= $url . ';;';
        $audio_titles .= format_strings($title) . ';;';
      }
    }
    array_push($csv_review, $audio_urls);
    array_push($csv_review, $audio_titles);
    //body text
    $body_text = '';
    foreach ($review['body'] as $paragraph) {
      $body_text .= format_strings($paragraph);
    }
    array_push($csv_review, $body_text);
    array_push($output, $csv_review);
  }

  return $output;
}

function format_strings($string) {
  return str_replace('"', "\"", $string);
}

// utility function for displaying large arrays of data.
function pre_print($input) {
  print '<pre>';
  print_r($input);
  print '</pre>';
}

/* 
Drush commands
drush dl feeds
drush en feeds
drush en feeds_ui
drush dl feeds_tamper
drush en feeds_tamper
drush en feeds_tamper_ui

in content type, add album title as text. 
change view to show that instead of content title.
change view filter to include album title 

Add feed importer:
basic settings: standalone form, periodic off, import on submission on.
fetcher: file upload.
parser: csv
csv parser settings: default delimiter |, no headers unchecked, utf8.
processor: node
node processor settings: bundle = 'review' (content type), "Update existing nodes", delete non existant nodes,
do not authorize or expire.
mapping: 

key - Title (title) 
Used as unique.
artist - Artist (field_artist)   
title - Album Title (field_album_title)   
labelinfo - Label Info (field_label_info)   
img - Album Art: URL (field_album_art:url)    
audio - Old Audio Links (Not active, for records keeping purposes): URL (field_audio_links:url)   
audio-title - Old Audio Links (Not active, for records keeping purposes): Title (field_audio_links:title)   
body - Review Body (field_review_body)

feeds tamper tab:
add plugin to any multi value fields (audio url and audio title). 
type = explode
delimiter = ;;

*/

?>