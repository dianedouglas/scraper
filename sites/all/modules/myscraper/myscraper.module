<?php
/**
* Implementation of hook_menu().
*
*/
function myscraper_menu() {
  $items['scrape'] = array(
    'title' => t('Aquarius Records Reviews'),
    'page callback' => 'scrape',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function scrape() {

  // get array of urls to query. 
  $url_queries = array();
  // go through each letter in the alphabet and figure out how many pages on each letter.
  $alphabet = range('a', 'z');
  $alphabet[] = 'other';
  // base path for every page.
  $base_path = 'https://web.archive.org/web/20160410015723/http://aquariusrecords.org/cat/';
  
  foreach ($alphabet as $letter) {
    $current_url = $base_path . $letter . '.html';
    $total = getPagesForLetter($current_url);
    $url_queries[$letter] = $total; 
  }

  $final_list_urls = [];
  foreach ($url_queries as $letter => $total_pages) {
    $final_list_urls[] = $base_path . $letter . '.html';
    for ($i=2; $i <=$total_pages ; $i++) { 
      $final_list_urls[] = $base_path . $letter . $i . '.html';
    }
  }

  // redefine for testing:
  $final_list_urls = ['https://web.archive.org/web/20160410015723/http://aquariusrecords.org/cat/a7.html'];

  foreach ($final_list_urls as $query) {
    scraper($query);
  }

  return 'done';
}

function getPagesForLetter($url) {
  $html = new DOMDocument();
  @$html->loadHTMLFile($url);

  foreach($html->getElementsByTagName('div') as $div){
    if($div->getAttribute('align') === 'center'){
      foreach ($div->getElementsByTagName('a') as $a) {
        if (strpos($a->textContent, 'Â»') !== FALSE) {
          // if you reach the end of the page numbers
          break;
        } else {
          $last_page = $a->textContent;
        }
      }
    }
  };
  return $last_page;
}

function scraper($url) {
  // Get all records on one page.
  $html = new DOMDocument();
  @$html->loadHTMLFile($url);


  // Empty array to hold all links to return 
  $links = array(); 
  $imgs = array(); 

  //Loop through each <a> tag in the dom and add it to the link array 
  $count = 0;
  foreach($html->getElementsByTagName('a') as $link) { 
    if ($count > 116) {
      $links[] = array('url' => $link->getAttribute('href'), 'text' => $link->nodeValue); 
    }
    if ($link->nodeValue === '1') {
      break;
    }
    $count++;
  }
  array_pop($links);
  array_pop($links);
  // pre_print($links);
  // Now $links holds a flat array of all links.
  // $links[0] => Array
  // (
  //     [url] => /web/20150322130420/http://aquariusrecords.org/audio/amtinotoinfino.m3u
  //     [text] => "In O"
  // )

  $reviews = array(); //hold raw review data.
  $count = 0; // need this because reviews are stored as paragraph tags. But not the first 4.
  $review_index = 0; // we'll use this to number the reviews as we store them in the $reviews array.

  foreach($html->getElementsByTagName('p') as $ptag) { 
    $count++;
    if ($count > 4) {
      // at this point this is ONE ALBUM REVIEW.
      foreach ($ptag->childNodes as $node) {
      // for each thing inside a review...
        if ($node->nodeValue) { 
          // store all paragraphs as a review. Includes variable amounts of data. 
          // always includes artist, title, label info.
          // could include: review body paragraphs, song titles, and extra data such as messages like 'out of print' that we don't want to save in the database. Store it all for now. 
          // $formatted_reviews will parse this.
          $reviews['review' . $review_index][] = $node->nodeValue;
        }
      }

      // Now get all image tags to find album art for current album.
      foreach ($ptag->getElementsByTagName('img') as $imgnode) {
        // make sure the img tag you're storing is the album cover. 
        // raw HTML uses a blank 'dot.gif' image as spacer that we don't want to store. 
        // also, not all albums have album art stored. When you find one store it in the review under 'img'
        if ($imgnode->getAttribute('alt') == 'album cover') {
          $reviews['review' . $review_index]['img'] = $imgnode->getAttribute('src');
        }
      }
      $review_index++;
    }
  } 

  // pre_print($reviews);
  // Each entry in $reviews holds an array of paragraph data with variable length including the album art:
  /*
[review0] => Array
    (
        [0] => 


        [1] => ACID MOTHERS TEMPLE & THE MELTING PARAISO U.F.O.
        [2] => In O To Infinity
        [3] => (Important) cd 14.98
        [4] => THIS IS CURRENTLY OUT OF PRINT OR OTHERWISE UNAVAILABLE TO US AT THE MOMENT, SO PLEASE DO NOT ORDER IT. SORRY.
        [5] => It's really hard to keep up with these guys. We love pretty much everything they do...
        [6] => In O To Infinity marks two milestones of sorts for the bands, and for fans, ...
        [7] => And as much as we love all the different facets of AMT, this might be our favorite, ...
          // audio links
        [11] => MPEG Stream: "In O"
        [12] => 

        [13] => MPEG Stream: "In A"
        [14] => 
          // album art
        [img] => /web/20150322130420im_/http://aquariusrecords.org/images/amtinotocd.jpg
    )

  */



  $formatted_reviews = format_reviews_for_saving($reviews);
  save_reviews_as_nodes($formatted_reviews);
}

function format_reviews_for_saving($reviews) {
  $formatted_reviews = array();
  $link_count = 0;
  foreach ($reviews as $key => $review) {

    if ($review['1'] === 'top of page') {
      break;
    }

    $formatted_reviews[$key]['artist'] = $review['1'];
    $formatted_reviews[$key]['title'] = $review['2'];
    $formatted_reviews[$key]['labelinfo'] = $review['3'];
    $formatted_reviews[$key]['img'] = $review['img'];

    for($i = 4; $i < count($review); $i++){
      
      if (!strpos($review[$i], "CURRENTLY OUT OF PRINT")) {

        if(substr($review[$i], 0, 11) === "MPEG Stream"){
          $song_title = substr($review[$i], 13);
          $formatted_reviews[$key]['audio'][$song_title] = '';
        } elseif (substr($review[$i], 0, 9) === "RealAudio") {
          $song_title = substr($review[$i], 16);
          $formatted_reviews[$key]['audio'][$song_title] = '';
        }else {
          $formatted_reviews[$key]['body'][] = $review[$i];
        }

        if(substr($review[$i], 0, 11) === "MPEG Stream" || substr($review[$i], 0, 9) === "RealAudio") {
          $formatted_reviews[$key]['audio'][$song_title] = $links[$link_count]['url'];
          $link_count++;
        }

      }

    }

  }

  return $formatted_reviews;
}

function save_reviews_as_nodes($formatted_reviews) {
  foreach ($formatted_reviews as $key => $review) {
    $node = new StdClass();
    $node->type = 'review';
    node_object_prepare($node);
    $node->status = 1;
    $node->title = $review['title'];
    $node->language = LANGUAGE_NONE;

    $body_text = '';
    foreach ($review['body'] as $paragraph) {
      $body_text .= $paragraph;
    }
    $node->field_artist[$node->language][0]['value'] = $review['artist'];
    $node->field_label_info[$node->language][0]['value'] = $review['labelinfo'];
    $node->field_album_art[$node->language][0] = array('url' => 'https://web.archive.org'. $review['img'], 'title' => 'album_art');
    $node->field_review_body[$node->language][0]['value'] = $body_text;

    foreach ($review['audio'] as $title => $url) {
      $link_array = array('url' => 'https://web.archive.org'.$url, 'title' => $title);
      $node->field_audio_links[$node->language][] = $link_array;
    }

    $node->path = array('alias' => $key);
    $node = node_submit($node); 
    node_save($node);
  }
}

function pre_print($input) {
  print '<pre>';
  print_r($input);
  print '</pre>';
}

?>